// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sending.Queue.Example.Contexts.Postgres;

#nullable disable

namespace Sending.Queue.Example.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20220907140346_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SendingScheduler.Queue.Models.ResultHandlingJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("integer")
                        .HasColumnName("attempt_number");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("ErrorData")
                        .HasColumnType("jsonb")
                        .HasColumnName("error_data");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on");

                    b.Property<string>("SendJobErrorData")
                        .HasColumnType("jsonb")
                        .HasColumnName("send_job_error_data");

                    b.Property<long>("SendJobId")
                        .HasColumnType("bigint")
                        .HasColumnName("send_job_id");

                    b.Property<int>("SendJobStatus")
                        .HasColumnType("integer")
                        .HasColumnName("send_job_status");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_result_handling_jobs");

                    b.HasIndex("SendJobId")
                        .HasDatabaseName("ix_result_handling_jobs_send_job_id");

                    b.HasIndex("ServiceId", "Status", "StartTime")
                        .HasDatabaseName("ix_result_handling_jobs_service_id_status_start_time");

                    b.ToTable("result_handling_jobs", (string)null);
                });

            modelBuilder.Entity("SendingScheduler.Queue.Models.SendJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("integer")
                        .HasColumnName("attempt_number");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("HandleOrder")
                        .HasColumnType("integer")
                        .HasColumnName("handle_order");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_send_jobs");

                    b.HasIndex("ServiceId", "Status", "StartTime", "HandleOrder")
                        .HasDatabaseName("ix_send_jobs_service_id_status_start_time_handle_order");

                    b.ToTable("send_jobs", (string)null);
                });

            modelBuilder.Entity("SendingScheduler.Queue.Models.SendJobData", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Data")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}")
                        .HasColumnName("data");

                    b.Property<string>("MetaData")
                        .HasColumnType("jsonb")
                        .HasColumnName("meta_data");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("ResponseData")
                        .HasColumnType("jsonb")
                        .HasColumnName("response_data");

                    b.HasKey("Id")
                        .HasName("pk_send_jobs_data");

                    b.ToTable("send_jobs_data", (string)null);
                });

            modelBuilder.Entity("SendingScheduler.Queue.Models.ResultHandlingJob", b =>
                {
                    b.HasOne("SendingScheduler.Queue.Models.SendJob", "SendJob")
                        .WithMany()
                        .HasForeignKey("SendJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_result_handling_jobs_send_jobs_send_job_id");

                    b.Navigation("SendJob");
                });

            modelBuilder.Entity("SendingScheduler.Queue.Models.SendJobData", b =>
                {
                    b.HasOne("SendingScheduler.Queue.Models.SendJob", null)
                        .WithOne("Data")
                        .HasForeignKey("SendingScheduler.Queue.Models.SendJobData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_send_jobs_data_send_jobs_id");
                });

            modelBuilder.Entity("SendingScheduler.Queue.Models.SendJob", b =>
                {
                    b.Navigation("Data")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
